{
	"id": "2dff624c20c4e3d1cb45b6f7663896d6",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.9",
	"solcLongVersion": "0.8.9+commit.e5eed63a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./extensions/IERC20Metadata.sol\";\r\nimport \"../../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    // string private _name;\r\n    // string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor() {\r\n        // _name = name_;\r\n        // _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    // function name() public view virtual override returns (string memory) {\r\n    //     return _name;\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Returns the symbol of the token, usually a shorter version of the\r\n    //  * name.\r\n    //  */\r\n    // function symbol() public view virtual override returns (string memory) {\r\n    //     return _symbol;\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Returns the number of decimals used to get its user representation.\r\n    //  * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n    //  * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n    //  *\r\n    //  * Tokens usually opt for a value of 18, imitating the relationship between\r\n    //  * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n    //  * overridden;\r\n    //  *\r\n    //  * NOTE: This information is only used for _display_ purposes: it in\r\n    //  * no way affects any of the arithmetic of the contract, including\r\n    //  * {IERC20-balanceOf} and {IERC20-transfer}.\r\n    //  */\r\n    // function decimals() public view virtual override returns (uint8) {\r\n    //     return 18;\r\n    // }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"
			},
			"contracts/openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
			},
			"contracts/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    // function name() external view returns (string memory);\r\n\r\n    // /**\r\n    //  * @dev Returns the symbol of the token.\r\n    //  */\r\n    // function symbol() external view returns (string memory);\r\n\r\n    // /**\r\n    //  * @dev Returns the decimals places of the token.\r\n    //  */\r\n    // function decimals() external view returns (uint8);\r\n}\r\n"
			},
			"contracts/openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":1437:13047  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":2037:2117  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":1437:13047  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":1437:13047  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_11\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_11:\n      dup1\n      0x095ea7b3\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4616:4817  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_3:\n      tag_12\n      tag_13\n      calldatasize\n      0x04\n      tag_14\n      jump\t// in\n    tag_13:\n      tag_15\n      jump\t// in\n    tag_12:\n      mload(0x40)\n        /* \"#utility.yul\":616:630   */\n      swap1\n      iszero\n        /* \"#utility.yul\":609:631   */\n      iszero\n        /* \"#utility.yul\":591:632   */\n      dup2\n      mstore\n        /* \"#utility.yul\":579:581   */\n      0x20\n        /* \"#utility.yul\":564:582   */\n      add\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4616:4817  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_16:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":3385:3493  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_4:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":3473:3485  _totalSupply */\n      sload(0x02)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":3385:3493  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_18:\n      mload(0x40)\n        /* \"#utility.yul\":789:814   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":777:779   */\n      0x20\n        /* \"#utility.yul\":762:780   */\n      add\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":3385:3493  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_16\n        /* \"#utility.yul\":643:820   */\n      jump\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5397:5692  function transferFrom(... */\n    tag_5:\n      tag_12\n      tag_23\n      calldatasize\n      0x04\n      tag_24\n      jump\t// in\n    tag_23:\n      tag_25\n      jump\t// in\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6101:6339  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_6:\n      tag_12\n      tag_28\n      calldatasize\n      0x04\n      tag_14\n      jump\t// in\n    tag_28:\n      tag_29\n      jump\t// in\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":3556:3683  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_7:\n      tag_18\n      tag_32\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_32:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":3657:3675  _balances[account] */\n      and\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":3630:3637  uint256 */\n      0x00\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":3657:3675  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":3556:3683  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6842:7278  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_12\n      tag_37\n      calldatasize\n      0x04\n      tag_14\n      jump\t// in\n    tag_37:\n      tag_38\n      jump\t// in\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":3889:4082  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_9:\n      tag_12\n      tag_41\n      calldatasize\n      0x04\n      tag_14\n      jump\t// in\n    tag_41:\n      tag_42\n      jump\t// in\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4145:4296  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_10:\n      tag_18\n      tag_45\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_45:\n      tag_47\n      jump\t// in\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4616:4817  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_15:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4699:4703  bool */\n      0x00\n        /* \"contracts/openzeppelin/contracts/utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4755:4787  _approve(owner, spender, amount) */\n      tag_52\n        /* \"contracts/openzeppelin/contracts/utils/Context.sol\":736:746  msg.sender */\n      dup2\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4771:4778  spender */\n      dup6\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4780:4786  amount */\n      dup6\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4755:4763  _approve */\n      tag_53\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4755:4787  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_52:\n      pop\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4805:4809  true */\n      0x01\n      swap4\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4616:4817  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5397:5692  function transferFrom(... */\n    tag_25:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5528:5532  bool */\n      0x00\n        /* \"contracts/openzeppelin/contracts/utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5586:5624  _spendAllowance(from, spender, amount) */\n      tag_57\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5602:5606  from */\n      dup6\n        /* \"contracts/openzeppelin/contracts/utils/Context.sol\":736:746  msg.sender */\n      dup3\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5617:5623  amount */\n      dup6\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5586:5601  _spendAllowance */\n      tag_58\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5586:5624  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_57:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5635:5662  _transfer(from, to, amount) */\n      tag_59\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5645:5649  from */\n      dup6\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5651:5653  to */\n      dup6\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5655:5661  amount */\n      dup6\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5635:5644  _transfer */\n      tag_60\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5635:5662  _transfer(from, to, amount) */\n      jump\t// in\n    tag_59:\n      pop\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5680:5684  true */\n      0x01\n      swap5\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":5397:5692  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6101:6339  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_29:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6189:6193  bool */\n      0x00\n        /* \"contracts/openzeppelin/contracts/utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6245:6309  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_52\n        /* \"contracts/openzeppelin/contracts/utils/Context.sol\":736:746  msg.sender */\n      dup2\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6261:6268  spender */\n      dup6\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6298:6308  addedValue */\n      dup6\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6270:6295  allowance(owner, spender) */\n      tag_64\n        /* \"contracts/openzeppelin/contracts/utils/Context.sol\":736:746  msg.sender */\n      dup4\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6261:6268  spender */\n      dup4\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6270:6279  allowance */\n      tag_47\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6270:6295  allowance(owner, spender) */\n      jump\t// in\n    tag_64:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6270:6308  allowance(owner, spender) + addedValue */\n      tag_65\n      swap2\n      swap1\n      tag_66\n      jump\t// in\n    tag_65:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6245:6253  _approve */\n      tag_53\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6245:6309  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6842:7278  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_38:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6935:6939  bool */\n      0x00\n        /* \"contracts/openzeppelin/contracts/utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6935:6939  bool */\n      dup2\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7018:7043  allowance(owner, spender) */\n      tag_70\n        /* \"contracts/openzeppelin/contracts/utils/Context.sol\":736:746  msg.sender */\n      dup3\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7035:7042  spender */\n      dup7\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7018:7027  allowance */\n      tag_47\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7018:7043  allowance(owner, spender) */\n      jump\t// in\n    tag_70:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":6991:7043  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7082:7097  subtractedValue */\n      dup4\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7062:7078  currentAllowance */\n      dup2\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7062:7097  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7054:7139  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_71\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2046:2048   */\n      0x20\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7054:7139  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2028:2049   */\n      mstore\n        /* \"#utility.yul\":2085:2087   */\n      0x25\n        /* \"#utility.yul\":2065:2083   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2058:2088   */\n      mstore\n        /* \"#utility.yul\":2124:2158   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":2104:2122   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2097:2159   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":2175:2193   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2168:2203   */\n      mstore\n        /* \"#utility.yul\":2220:2239   */\n      0x84\n      add\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7054:7139  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_72:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_71:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7175:7235  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_59\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7184:7189  owner */\n      dup3\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7191:7198  spender */\n      dup7\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7219:7234  subtractedValue */\n      dup7\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7200:7216  currentAllowance */\n      dup5\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7200:7234  currentAllowance - subtractedValue */\n      sub\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7175:7183  _approve */\n      tag_53\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7175:7235  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":3889:4082  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_42:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":3968:3972  bool */\n      0x00\n        /* \"contracts/openzeppelin/contracts/utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4024:4052  _transfer(owner, to, amount) */\n      tag_52\n        /* \"contracts/openzeppelin/contracts/utils/Context.sol\":736:746  msg.sender */\n      dup2\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4041:4043  to */\n      dup6\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4045:4051  amount */\n      dup6\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4024:4033  _transfer */\n      tag_60\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4024:4052  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4145:4296  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_47:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4261:4279  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4234:4241  uint256 */\n      0x00\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4261:4279  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4261:4272  _allowances */\n      0x01\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4261:4279  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4261:4288  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":4145:4296  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10467:10847  function _approve(... */\n    tag_53:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10603:10622  owner != address(0) */\n      dup4\n      and\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10595:10663  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_81\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2452:2454   */\n      0x20\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10595:10663  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2434:2455   */\n      mstore\n        /* \"#utility.yul\":2491:2493   */\n      0x24\n        /* \"#utility.yul\":2471:2489   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":2464:2494   */\n      mstore\n        /* \"#utility.yul\":2530:2564   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":2510:2528   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2503:2565   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":2581:2599   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2574:2608   */\n      mstore\n        /* \"#utility.yul\":2625:2644   */\n      0x84\n      add\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10595:10663  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_72\n        /* \"#utility.yul\":2250:2650   */\n      jump\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10595:10663  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10682:10703  spender != address(0) */\n      dup3\n      and\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10674:10742  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_84\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2857:2859   */\n      0x20\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10674:10742  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2839:2860   */\n      mstore\n        /* \"#utility.yul\":2896:2898   */\n      0x22\n        /* \"#utility.yul\":2876:2894   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2869:2899   */\n      mstore\n        /* \"#utility.yul\":2935:2969   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":2915:2933   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2908:2970   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":2986:3004   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2979:3011   */\n      mstore\n        /* \"#utility.yul\":3028:3047   */\n      0x84\n      add\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10674:10742  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_72\n        /* \"#utility.yul\":2655:3053   */\n      jump\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10674:10742  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_84:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10755:10773  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10755:10766  _allowances */\n      0x01\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10755:10773  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10755:10782  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10755:10791  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10807:10839  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":789:814   */\n      dup5\n      dup2\n      mstore\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10807:10839  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":762:780   */\n      add\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10807:10839  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":10467:10847  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11138:11591  function _spendAllowance(... */\n    tag_58:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11273:11297  uint256 currentAllowance */\n      0x00\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11300:11325  allowance(owner, spender) */\n      tag_89\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11310:11315  owner */\n      dup5\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11317:11324  spender */\n      dup5\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11300:11309  allowance */\n      tag_47\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11300:11325  allowance(owner, spender) */\n      jump\t// in\n    tag_89:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11273:11325  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11340:11356  currentAllowance */\n      dup2\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11340:11377  currentAllowance != type(uint256).max */\n      eq\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11336:11584  if (currentAllowance != type(uint256).max) {... */\n      tag_94\n      jumpi\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11422:11428  amount */\n      dup2\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11402:11418  currentAllowance */\n      dup2\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11402:11428  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11394:11462  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_91\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3260:3262   */\n      0x20\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11394:11462  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3242:3263   */\n      mstore\n        /* \"#utility.yul\":3299:3301   */\n      0x1d\n        /* \"#utility.yul\":3279:3297   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3272:3302   */\n      mstore\n        /* \"#utility.yul\":3338:3369   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":3318:3336   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3311:3370   */\n      mstore\n        /* \"#utility.yul\":3387:3405   */\n      0x64\n      add\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11394:11462  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_72\n        /* \"#utility.yul\":3058:3411   */\n      jump\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11394:11462  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_91:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11506:11557  _approve(owner, spender, currentAllowance - amount) */\n      tag_94\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11515:11520  owner */\n      dup5\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11522:11529  spender */\n      dup5\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11550:11556  amount */\n      dup5\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11531:11547  currentAllowance */\n      dup5\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11531:11556  currentAllowance - amount */\n      sub\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11506:11514  _approve */\n      tag_53\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11506:11557  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_94:\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11262:11591  {... */\n      pop\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":11138:11591  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7748:8419  function _transfer(... */\n    tag_60:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7879:7897  from != address(0) */\n      dup4\n      and\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7871:7939  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_96\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3618:3620   */\n      0x20\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7871:7939  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3600:3621   */\n      mstore\n        /* \"#utility.yul\":3657:3659   */\n      0x25\n        /* \"#utility.yul\":3637:3655   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3630:3660   */\n      mstore\n        /* \"#utility.yul\":3696:3730   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":3676:3694   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3669:3731   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":3747:3765   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3740:3775   */\n      mstore\n        /* \"#utility.yul\":3792:3811   */\n      0x84\n      add\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7871:7939  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_72\n        /* \"#utility.yul\":3416:3817   */\n      jump\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7871:7939  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_96:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7958:7974  to != address(0) */\n      dup3\n      and\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7950:8014  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4024:4026   */\n      0x20\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7950:8014  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4006:4027   */\n      mstore\n        /* \"#utility.yul\":4063:4065   */\n      0x23\n        /* \"#utility.yul\":4043:4061   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4036:4066   */\n      mstore\n        /* \"#utility.yul\":4102:4136   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":4082:4100   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4075:4137   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":4153:4171   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4146:4179   */\n      mstore\n        /* \"#utility.yul\":4196:4215   */\n      0x84\n      add\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7950:8014  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_72\n        /* \"#utility.yul\":3822:4221   */\n      jump\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":7950:8014  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_99:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8100:8115  _balances[from] */\n      dup4\n      and\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8078:8097  uint256 fromBalance */\n      0x00\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8100:8115  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8134:8155  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8126:8198  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_104\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4428:4430   */\n      0x20\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8126:8198  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4410:4431   */\n      mstore\n        /* \"#utility.yul\":4467:4469   */\n      0x26\n        /* \"#utility.yul\":4447:4465   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4440:4470   */\n      mstore\n        /* \"#utility.yul\":4506:4540   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":4486:4504   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4479:4541   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":4557:4575   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4550:4586   */\n      mstore\n        /* \"#utility.yul\":4603:4622   */\n      0x84\n      add\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8126:8198  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_72\n        /* \"#utility.yul\":4226:4628   */\n      jump\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8126:8198  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_104:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8234:8249  _balances[from] */\n      dup1\n      dup6\n      and\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8234:8243  _balances */\n      0x00\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8234:8249  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8252:8272  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8234:8272  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8294:8307  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8294:8317  _balances[to] += amount */\n      dup1\n      sload\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8266:8272  amount */\n      dup5\n      swap3\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8234:8243  _balances */\n      swap1\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8294:8317  _balances[to] += amount */\n      tag_107\n      swap1\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8266:8272  amount */\n      dup5\n      swap1\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8294:8317  _balances[to] += amount */\n      tag_66\n      jump\t// in\n    tag_107:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8350:8352  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8335:8361  Transfer(from, to, amount) */\n      and\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8344:8348  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8335:8361  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8354:8360  amount */\n      dup5\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8335:8361  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_108\n      swap2\n        /* \"#utility.yul\":789:814   */\n      dup2\n      mstore\n        /* \"#utility.yul\":777:779   */\n      0x20\n        /* \"#utility.yul\":762:780   */\n      add\n      swap1\n        /* \"#utility.yul\":643:820   */\n      jump\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8335:8361  Transfer(from, to, amount) */\n    tag_108:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":8374:8411  _afterTokenTransfer(from, to, amount) */\n      tag_94\n        /* \"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":12191:12316  function _beforeTokenTransfer(... */\n      jump\n        /* \"#utility.yul\":14:187   */\n    tag_113:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:181   */\n      tag_116\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":111:181   */\n    tag_116:\n        /* \"#utility.yul\":14:187   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":192:446   */\n    tag_14:\n        /* \"#utility.yul\":260:266   */\n      0x00\n        /* \"#utility.yul\":268:274   */\n      dup1\n        /* \"#utility.yul\":321:323   */\n      0x40\n        /* \"#utility.yul\":309:318   */\n      dup4\n        /* \"#utility.yul\":300:307   */\n      dup6\n        /* \"#utility.yul\":296:319   */\n      sub\n        /* \"#utility.yul\":292:324   */\n      slt\n        /* \"#utility.yul\":289:341   */\n      iszero\n      tag_118\n      jumpi\n        /* \"#utility.yul\":337:338   */\n      0x00\n        /* \"#utility.yul\":334:335   */\n      dup1\n        /* \"#utility.yul\":327:339   */\n      revert\n        /* \"#utility.yul\":289:341   */\n    tag_118:\n        /* \"#utility.yul\":360:389   */\n      tag_119\n        /* \"#utility.yul\":379:388   */\n      dup4\n        /* \"#utility.yul\":360:389   */\n      tag_113\n      jump\t// in\n    tag_119:\n        /* \"#utility.yul\":350:389   */\n      swap5\n        /* \"#utility.yul\":436:438   */\n      0x20\n        /* \"#utility.yul\":421:439   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":408:440   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":192:446   */\n      jump\t// out\n        /* \"#utility.yul\":825:1153   */\n    tag_24:\n        /* \"#utility.yul\":902:908   */\n      0x00\n        /* \"#utility.yul\":910:916   */\n      dup1\n        /* \"#utility.yul\":918:924   */\n      0x00\n        /* \"#utility.yul\":971:973   */\n      0x60\n        /* \"#utility.yul\":959:968   */\n      dup5\n        /* \"#utility.yul\":950:957   */\n      dup7\n        /* \"#utility.yul\":946:969   */\n      sub\n        /* \"#utility.yul\":942:974   */\n      slt\n        /* \"#utility.yul\":939:991   */\n      iszero\n      tag_123\n      jumpi\n        /* \"#utility.yul\":987:988   */\n      0x00\n        /* \"#utility.yul\":984:985   */\n      dup1\n        /* \"#utility.yul\":977:989   */\n      revert\n        /* \"#utility.yul\":939:991   */\n    tag_123:\n        /* \"#utility.yul\":1010:1039   */\n      tag_124\n        /* \"#utility.yul\":1029:1038   */\n      dup5\n        /* \"#utility.yul\":1010:1039   */\n      tag_113\n      jump\t// in\n    tag_124:\n        /* \"#utility.yul\":1000:1039   */\n      swap3\n      pop\n        /* \"#utility.yul\":1058:1096   */\n      tag_125\n        /* \"#utility.yul\":1092:1094   */\n      0x20\n        /* \"#utility.yul\":1081:1090   */\n      dup6\n        /* \"#utility.yul\":1077:1095   */\n      add\n        /* \"#utility.yul\":1058:1096   */\n      tag_113\n      jump\t// in\n    tag_125:\n        /* \"#utility.yul\":1048:1096   */\n      swap2\n      pop\n        /* \"#utility.yul\":1143:1145   */\n      0x40\n        /* \"#utility.yul\":1132:1141   */\n      dup5\n        /* \"#utility.yul\":1128:1146   */\n      add\n        /* \"#utility.yul\":1115:1147   */\n      calldataload\n        /* \"#utility.yul\":1105:1147   */\n      swap1\n      pop\n        /* \"#utility.yul\":825:1153   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1158:1344   */\n    tag_33:\n        /* \"#utility.yul\":1217:1223   */\n      0x00\n        /* \"#utility.yul\":1270:1272   */\n      0x20\n        /* \"#utility.yul\":1258:1267   */\n      dup3\n        /* \"#utility.yul\":1249:1256   */\n      dup5\n        /* \"#utility.yul\":1245:1268   */\n      sub\n        /* \"#utility.yul\":1241:1273   */\n      slt\n        /* \"#utility.yul\":1238:1290   */\n      iszero\n      tag_127\n      jumpi\n        /* \"#utility.yul\":1286:1287   */\n      0x00\n        /* \"#utility.yul\":1283:1284   */\n      dup1\n        /* \"#utility.yul\":1276:1288   */\n      revert\n        /* \"#utility.yul\":1238:1290   */\n    tag_127:\n        /* \"#utility.yul\":1309:1338   */\n      tag_128\n        /* \"#utility.yul\":1328:1337   */\n      dup3\n        /* \"#utility.yul\":1309:1338   */\n      tag_113\n      jump\t// in\n    tag_128:\n        /* \"#utility.yul\":1299:1338   */\n      swap4\n        /* \"#utility.yul\":1158:1344   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1349:1609   */\n    tag_46:\n        /* \"#utility.yul\":1417:1423   */\n      0x00\n        /* \"#utility.yul\":1425:1431   */\n      dup1\n        /* \"#utility.yul\":1478:1480   */\n      0x40\n        /* \"#utility.yul\":1466:1475   */\n      dup4\n        /* \"#utility.yul\":1457:1464   */\n      dup6\n        /* \"#utility.yul\":1453:1476   */\n      sub\n        /* \"#utility.yul\":1449:1481   */\n      slt\n        /* \"#utility.yul\":1446:1498   */\n      iszero\n      tag_130\n      jumpi\n        /* \"#utility.yul\":1494:1495   */\n      0x00\n        /* \"#utility.yul\":1491:1492   */\n      dup1\n        /* \"#utility.yul\":1484:1496   */\n      revert\n        /* \"#utility.yul\":1446:1498   */\n    tag_130:\n        /* \"#utility.yul\":1517:1546   */\n      tag_131\n        /* \"#utility.yul\":1536:1545   */\n      dup4\n        /* \"#utility.yul\":1517:1546   */\n      tag_113\n      jump\t// in\n    tag_131:\n        /* \"#utility.yul\":1507:1546   */\n      swap2\n      pop\n        /* \"#utility.yul\":1565:1603   */\n      tag_132\n        /* \"#utility.yul\":1599:1601   */\n      0x20\n        /* \"#utility.yul\":1588:1597   */\n      dup5\n        /* \"#utility.yul\":1584:1602   */\n      add\n        /* \"#utility.yul\":1565:1603   */\n      tag_113\n      jump\t// in\n    tag_132:\n        /* \"#utility.yul\":1555:1603   */\n      swap1\n      pop\n        /* \"#utility.yul\":1349:1609   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1614:1839   */\n    tag_66:\n        /* \"#utility.yul\":1654:1657   */\n      0x00\n        /* \"#utility.yul\":1685:1686   */\n      dup3\n        /* \"#utility.yul\":1681:1687   */\n      not\n        /* \"#utility.yul\":1678:1679   */\n      dup3\n        /* \"#utility.yul\":1675:1688   */\n      gt\n        /* \"#utility.yul\":1672:1808   */\n      iszero\n      tag_134\n      jumpi\n        /* \"#utility.yul\":1730:1740   */\n      0x4e487b71\n        /* \"#utility.yul\":1725:1728   */\n      0xe0\n        /* \"#utility.yul\":1721:1741   */\n      shl\n        /* \"#utility.yul\":1718:1719   */\n      0x00\n        /* \"#utility.yul\":1711:1742   */\n      mstore\n        /* \"#utility.yul\":1765:1769   */\n      0x11\n        /* \"#utility.yul\":1762:1763   */\n      0x04\n        /* \"#utility.yul\":1755:1770   */\n      mstore\n        /* \"#utility.yul\":1793:1797   */\n      0x24\n        /* \"#utility.yul\":1790:1791   */\n      0x00\n        /* \"#utility.yul\":1783:1798   */\n      revert\n        /* \"#utility.yul\":1672:1808   */\n    tag_134:\n      pop\n        /* \"#utility.yul\":1824:1833   */\n      add\n      swap1\n        /* \"#utility.yul\":1614:1839   */\n      jump\t// out\n\n    auxdata: 0xa26469706673582212204b68ec20ceb6e086e26b0abd0db3cf89266177148496eceb359fba58cdd0c90464736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_28": {
									"entryPoint": null,
									"id": 28,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610705806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a08231146100ed578063a457c2d714610116578063a9059cbb14610129578063dd62ed3e1461013c57600080fd5b8063095ea7b31461008d57806318160ddd146100b557806323b872dd146100c757806339509351146100da575b600080fd5b6100a061009b3660046105ee565b61014f565b60405190151581526020015b60405180910390f35b6002545b6040519081526020016100ac565b6100a06100d5366004610618565b610167565b6100a06100e83660046105ee565b61018b565b6100b96100fb366004610654565b6001600160a01b031660009081526020819052604090205490565b6100a06101243660046105ee565b6101ad565b6100a06101373660046105ee565b61022d565b6100b961014a366004610676565b61023b565b60003361015d818585610266565b5060019392505050565b60003361017585828561038a565b610180858585610404565b506001949350505050565b60003361015d81858561019e838361023b565b6101a891906106a9565b610266565b600033816101bb828661023b565b9050838110156102205760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6101808286868403610266565b60003361015d818585610404565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166102c85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610217565b6001600160a01b0382166103295760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610217565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610396848461023b565b905060001981146103fe57818110156103f15760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610217565b6103fe8484848403610266565b50505050565b6001600160a01b0383166104685760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610217565b6001600160a01b0382166104ca5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610217565b6001600160a01b038316600090815260208190526040902054818110156105425760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610217565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906105799084906106a9565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105c591815260200190565b60405180910390a36103fe565b80356001600160a01b03811681146105e957600080fd5b919050565b6000806040838503121561060157600080fd5b61060a836105d2565b946020939093013593505050565b60008060006060848603121561062d57600080fd5b610636846105d2565b9250610644602085016105d2565b9150604084013590509250925092565b60006020828403121561066657600080fd5b61066f826105d2565b9392505050565b6000806040838503121561068957600080fd5b610692836105d2565b91506106a0602084016105d2565b90509250929050565b600082198211156106ca57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212204b68ec20ceb6e086e26b0abd0db3cf89266177148496eceb359fba58cdd0c90464736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x705 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x13C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0xDA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x5EE JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xA0 PUSH2 0xD5 CALLDATASIZE PUSH1 0x4 PUSH2 0x618 JUMP JUMPDEST PUSH2 0x167 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0xE8 CALLDATASIZE PUSH1 0x4 PUSH2 0x5EE JUMP JUMPDEST PUSH2 0x18B JUMP JUMPDEST PUSH2 0xB9 PUSH2 0xFB CALLDATASIZE PUSH1 0x4 PUSH2 0x654 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x124 CALLDATASIZE PUSH1 0x4 PUSH2 0x5EE JUMP JUMPDEST PUSH2 0x1AD JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x5EE JUMP JUMPDEST PUSH2 0x22D JUMP JUMPDEST PUSH2 0xB9 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x676 JUMP JUMPDEST PUSH2 0x23B JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x15D DUP2 DUP6 DUP6 PUSH2 0x266 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x175 DUP6 DUP3 DUP6 PUSH2 0x38A JUMP JUMPDEST PUSH2 0x180 DUP6 DUP6 DUP6 PUSH2 0x404 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x15D DUP2 DUP6 DUP6 PUSH2 0x19E DUP4 DUP4 PUSH2 0x23B JUMP JUMPDEST PUSH2 0x1A8 SWAP2 SWAP1 PUSH2 0x6A9 JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x1BB DUP3 DUP7 PUSH2 0x23B JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x220 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x180 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x266 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x15D DUP2 DUP6 DUP6 PUSH2 0x404 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x217 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x329 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x217 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x396 DUP5 DUP5 PUSH2 0x23B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x3FE JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x217 JUMP JUMPDEST PUSH2 0x3FE DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x266 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x468 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x217 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x217 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x542 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x217 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x579 SWAP1 DUP5 SWAP1 PUSH2 0x6A9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x5C5 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x3FE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x601 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60A DUP4 PUSH2 0x5D2 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x62D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x636 DUP5 PUSH2 0x5D2 JUMP JUMPDEST SWAP3 POP PUSH2 0x644 PUSH1 0x20 DUP6 ADD PUSH2 0x5D2 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x66F DUP3 PUSH2 0x5D2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x689 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x692 DUP4 PUSH2 0x5D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x6A0 PUSH1 0x20 DUP5 ADD PUSH2 0x5D2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x6CA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4B PUSH9 0xEC20CEB6E086E26B0A 0xBD 0xD 0xB3 0xCF DUP10 0x26 PUSH2 0x7714 DUP5 SWAP7 0xEC 0xEB CALLDATALOAD SWAP16 0xBA PC 0xCD 0xD0 0xC9 DIV PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "1437:11610:0:-:0;;;2037:80;;;;;;;;;;1437:11610;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_538": {
									"entryPoint": null,
									"id": 538,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_473": {
									"entryPoint": 614,
									"id": 473,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_527": {
									"entryPoint": null,
									"id": 527,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_636": {
									"entryPoint": null,
									"id": 636,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_516": {
									"entryPoint": 906,
									"id": 516,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_300": {
									"entryPoint": 1028,
									"id": 300,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_95": {
									"entryPoint": 571,
									"id": 95,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_120": {
									"entryPoint": 335,
									"id": 120,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_52": {
									"entryPoint": null,
									"id": 52,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decreaseAllowance_223": {
									"entryPoint": 429,
									"id": 223,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_182": {
									"entryPoint": 395,
									"id": 182,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@totalSupply_38": {
									"entryPoint": null,
									"id": 38,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_153": {
									"entryPoint": 359,
									"id": 153,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_77": {
									"entryPoint": 557,
									"id": 77,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1490,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1620,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 1654,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 1560,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 1518,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1705,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4630:4",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:4",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:124:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:4",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:4"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:4"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:4"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "165:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "174:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "177:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:4"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:4"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "150:3:4",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "155:1:4",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:4"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:4"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "159:1:4",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:4"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:4"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:4"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:50:4"
															},
															"nodeType": "YulIf",
															"src": "111:70:4"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:4",
														"type": ""
													}
												],
												"src": "14:173:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "279:167:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "325:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "334:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "337:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "327:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "327:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "327:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "300:7:4"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "309:9:4"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "296:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "296:23:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "321:2:4",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "292:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "292:32:4"
															},
															"nodeType": "YulIf",
															"src": "289:52:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "350:39:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "379:9:4"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "360:18:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "360:29:4"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "350:6:4"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "398:42:4",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "425:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "436:2:4",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "421:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "421:18:4"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "408:12:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:32:4"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "398:6:4"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "237:9:4",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "248:7:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "260:6:4",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "268:6:4",
														"type": ""
													}
												],
												"src": "192:254:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "546:92:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "556:26:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "568:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "579:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "564:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "564:18:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "556:4:4"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "598:9:4"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "623:6:4"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "616:6:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "616:14:4"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "609:6:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "609:22:4"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "591:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "591:41:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "591:41:4"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "515:9:4",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "526:6:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "537:4:4",
														"type": ""
													}
												],
												"src": "451:187:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "744:76:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "754:26:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "766:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "777:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "762:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "762:18:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "754:4:4"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "796:9:4"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "807:6:4"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "789:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "789:25:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "789:25:4"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "713:9:4",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "724:6:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "735:4:4",
														"type": ""
													}
												],
												"src": "643:177:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "929:224:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "975:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "984:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "987:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "977:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "977:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "977:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "950:7:4"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "959:9:4"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "946:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "946:23:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "971:2:4",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "942:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "942:32:4"
															},
															"nodeType": "YulIf",
															"src": "939:52:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1000:39:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1029:9:4"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1010:18:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:29:4"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1000:6:4"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1048:48:4",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1081:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1092:2:4",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1077:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1077:18:4"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1058:18:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1058:38:4"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1048:6:4"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1105:42:4",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1132:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1143:2:4",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1128:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1128:18:4"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1115:12:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1115:32:4"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1105:6:4"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "879:9:4",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "890:7:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "902:6:4",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "910:6:4",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "918:6:4",
														"type": ""
													}
												],
												"src": "825:328:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1228:116:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1274:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1283:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1286:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1276:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1276:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1276:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1249:7:4"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1258:9:4"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1245:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1245:23:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1270:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1241:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1241:32:4"
															},
															"nodeType": "YulIf",
															"src": "1238:52:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1299:39:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1328:9:4"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1309:18:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1309:29:4"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1299:6:4"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1194:9:4",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1205:7:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1217:6:4",
														"type": ""
													}
												],
												"src": "1158:186:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1436:173:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1482:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1491:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1494:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1484:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1484:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1484:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1457:7:4"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1466:9:4"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1453:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1453:23:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1478:2:4",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1449:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1449:32:4"
															},
															"nodeType": "YulIf",
															"src": "1446:52:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1507:39:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1536:9:4"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1517:18:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1517:29:4"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1507:6:4"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1555:48:4",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1588:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1599:2:4",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1584:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1584:18:4"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1565:18:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1565:38:4"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1555:6:4"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1394:9:4",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1405:7:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1417:6:4",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1425:6:4",
														"type": ""
													}
												],
												"src": "1349:260:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1662:177:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1697:111:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1718:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1725:3:4",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1730:10:4",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1721:3:4"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1721:20:4"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1711:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1711:31:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1711:31:4"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1762:1:4",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1765:4:4",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1755:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1755:15:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1755:15:4"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1790:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1793:4:4",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1783:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1783:15:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1783:15:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1678:1:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "1685:1:4"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1681:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1681:6:4"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1675:2:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1675:13:4"
															},
															"nodeType": "YulIf",
															"src": "1672:136:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1817:16:4",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1828:1:4"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1831:1:4"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1824:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1824:9:4"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "1817:3:4"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "1645:1:4",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "1648:1:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "1654:3:4",
														"type": ""
													}
												],
												"src": "1614:225:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2018:227:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2035:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2046:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2028:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2028:21:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2028:21:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2069:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2080:2:4",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2065:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2065:18:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2085:2:4",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2058:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2058:30:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2058:30:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2108:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2119:2:4",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2104:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2104:18:4"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2124:34:4",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2097:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2097:62:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2097:62:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2179:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2190:2:4",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2175:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2175:18:4"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2195:7:4",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2168:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2168:35:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2168:35:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2212:27:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2224:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2235:3:4",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2220:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2220:19:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2212:4:4"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1995:9:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2009:4:4",
														"type": ""
													}
												],
												"src": "1844:401:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2424:226:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2441:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2452:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2434:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2434:21:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2434:21:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2475:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2486:2:4",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2471:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2471:18:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2491:2:4",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2464:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2464:30:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2464:30:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2514:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2525:2:4",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2510:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2510:18:4"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2530:34:4",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2503:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2503:62:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2503:62:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2585:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2596:2:4",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2581:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2581:18:4"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2601:6:4",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2574:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2574:34:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2574:34:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2617:27:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2629:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2640:3:4",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2625:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2625:19:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2617:4:4"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2401:9:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2415:4:4",
														"type": ""
													}
												],
												"src": "2250:400:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2829:224:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2846:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2857:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2839:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2839:21:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2839:21:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2880:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2891:2:4",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2876:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2876:18:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2896:2:4",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2869:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2869:30:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2869:30:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2919:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2930:2:4",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2915:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2915:18:4"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2935:34:4",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2908:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2908:62:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2908:62:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2990:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3001:2:4",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2986:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2986:18:4"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3006:4:4",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2979:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2979:32:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2979:32:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3020:27:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3032:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3043:3:4",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3028:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3028:19:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3020:4:4"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2806:9:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2820:4:4",
														"type": ""
													}
												],
												"src": "2655:398:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3232:179:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3249:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3260:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3242:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3242:21:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3242:21:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3283:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3294:2:4",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3279:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3279:18:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3299:2:4",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3272:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3272:30:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3272:30:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3322:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3333:2:4",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3318:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3318:18:4"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3338:31:4",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3311:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3311:59:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3311:59:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3379:26:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3391:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3402:2:4",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3387:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3387:18:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3379:4:4"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3209:9:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3223:4:4",
														"type": ""
													}
												],
												"src": "3058:353:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3590:227:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3607:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3618:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3600:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3600:21:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3600:21:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3641:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3652:2:4",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3637:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3637:18:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3657:2:4",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3630:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3630:30:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3630:30:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3680:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3691:2:4",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3676:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3676:18:4"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3696:34:4",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3669:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3669:62:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3669:62:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3751:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3762:2:4",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3747:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3747:18:4"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3767:7:4",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3740:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3740:35:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3740:35:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3784:27:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3796:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3807:3:4",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3792:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3792:19:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3784:4:4"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3567:9:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3581:4:4",
														"type": ""
													}
												],
												"src": "3416:401:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3996:225:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4013:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4024:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4006:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "4006:21:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4006:21:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4047:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4058:2:4",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4043:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4043:18:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4063:2:4",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4036:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "4036:30:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4036:30:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4086:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4097:2:4",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4082:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4082:18:4"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4102:34:4",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4075:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "4075:62:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4075:62:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4157:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4168:2:4",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4153:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4153:18:4"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4173:5:4",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4146:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "4146:33:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4146:33:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4188:27:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4200:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4211:3:4",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4196:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "4196:19:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4188:4:4"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3973:9:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3987:4:4",
														"type": ""
													}
												],
												"src": "3822:399:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4400:228:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4417:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4428:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4410:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "4410:21:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4410:21:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4451:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4462:2:4",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4447:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4447:18:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4467:2:4",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4440:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "4440:30:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4440:30:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4490:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4501:2:4",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4486:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4486:18:4"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4506:34:4",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4479:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "4479:62:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4479:62:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4561:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4572:2:4",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4557:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4557:18:4"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4577:8:4",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4550:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "4550:36:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4550:36:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4595:27:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4607:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4618:3:4",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4603:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "4603:19:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4595:4:4"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4377:9:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4391:4:4",
														"type": ""
													}
												],
												"src": "4226:402:4"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 4,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a08231146100ed578063a457c2d714610116578063a9059cbb14610129578063dd62ed3e1461013c57600080fd5b8063095ea7b31461008d57806318160ddd146100b557806323b872dd146100c757806339509351146100da575b600080fd5b6100a061009b3660046105ee565b61014f565b60405190151581526020015b60405180910390f35b6002545b6040519081526020016100ac565b6100a06100d5366004610618565b610167565b6100a06100e83660046105ee565b61018b565b6100b96100fb366004610654565b6001600160a01b031660009081526020819052604090205490565b6100a06101243660046105ee565b6101ad565b6100a06101373660046105ee565b61022d565b6100b961014a366004610676565b61023b565b60003361015d818585610266565b5060019392505050565b60003361017585828561038a565b610180858585610404565b506001949350505050565b60003361015d81858561019e838361023b565b6101a891906106a9565b610266565b600033816101bb828661023b565b9050838110156102205760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6101808286868403610266565b60003361015d818585610404565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166102c85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610217565b6001600160a01b0382166103295760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610217565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610396848461023b565b905060001981146103fe57818110156103f15760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610217565b6103fe8484848403610266565b50505050565b6001600160a01b0383166104685760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610217565b6001600160a01b0382166104ca5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610217565b6001600160a01b038316600090815260208190526040902054818110156105425760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610217565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906105799084906106a9565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105c591815260200190565b60405180910390a36103fe565b80356001600160a01b03811681146105e957600080fd5b919050565b6000806040838503121561060157600080fd5b61060a836105d2565b946020939093013593505050565b60008060006060848603121561062d57600080fd5b610636846105d2565b9250610644602085016105d2565b9150604084013590509250925092565b60006020828403121561066657600080fd5b61066f826105d2565b9392505050565b6000806040838503121561068957600080fd5b610692836105d2565b91506106a0602084016105d2565b90509250929050565b600082198211156106ca57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212204b68ec20ceb6e086e26b0abd0db3cf89266177148496eceb359fba58cdd0c90464736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x13C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0xDA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x5EE JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xA0 PUSH2 0xD5 CALLDATASIZE PUSH1 0x4 PUSH2 0x618 JUMP JUMPDEST PUSH2 0x167 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0xE8 CALLDATASIZE PUSH1 0x4 PUSH2 0x5EE JUMP JUMPDEST PUSH2 0x18B JUMP JUMPDEST PUSH2 0xB9 PUSH2 0xFB CALLDATASIZE PUSH1 0x4 PUSH2 0x654 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x124 CALLDATASIZE PUSH1 0x4 PUSH2 0x5EE JUMP JUMPDEST PUSH2 0x1AD JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x5EE JUMP JUMPDEST PUSH2 0x22D JUMP JUMPDEST PUSH2 0xB9 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x676 JUMP JUMPDEST PUSH2 0x23B JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x15D DUP2 DUP6 DUP6 PUSH2 0x266 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x175 DUP6 DUP3 DUP6 PUSH2 0x38A JUMP JUMPDEST PUSH2 0x180 DUP6 DUP6 DUP6 PUSH2 0x404 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x15D DUP2 DUP6 DUP6 PUSH2 0x19E DUP4 DUP4 PUSH2 0x23B JUMP JUMPDEST PUSH2 0x1A8 SWAP2 SWAP1 PUSH2 0x6A9 JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x1BB DUP3 DUP7 PUSH2 0x23B JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x220 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x180 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x266 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x15D DUP2 DUP6 DUP6 PUSH2 0x404 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x217 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x329 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x217 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x396 DUP5 DUP5 PUSH2 0x23B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x3FE JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x217 JUMP JUMPDEST PUSH2 0x3FE DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x266 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x468 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x217 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x217 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x542 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x217 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x579 SWAP1 DUP5 SWAP1 PUSH2 0x6A9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x5C5 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x3FE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x601 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60A DUP4 PUSH2 0x5D2 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x62D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x636 DUP5 PUSH2 0x5D2 JUMP JUMPDEST SWAP3 POP PUSH2 0x644 PUSH1 0x20 DUP6 ADD PUSH2 0x5D2 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x66F DUP3 PUSH2 0x5D2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x689 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x692 DUP4 PUSH2 0x5D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x6A0 PUSH1 0x20 DUP5 ADD PUSH2 0x5D2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x6CA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4B PUSH9 0xEC20CEB6E086E26B0A 0xBD 0xD 0xB3 0xCF DUP10 0x26 PUSH2 0x7714 DUP5 SWAP7 0xEC 0xEB CALLDATALOAD SWAP16 0xBA PC 0xCD 0xD0 0xC9 DIV PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "1437:11610:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4616:201;;;;;;:::i;:::-;;:::i;:::-;;;616:14:4;;609:22;591:41;;579:2;564:18;4616:201:0;;;;;;;;3385:108;3473:12;;3385:108;;;789:25:4;;;777:2;762:18;3385:108:0;643:177:4;5397:295:0;;;;;;:::i;:::-;;:::i;6101:238::-;;;;;;:::i;:::-;;:::i;3556:127::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3657:18:0;3630:7;3657:18;;;;;;;;;;;;3556:127;6842:436;;;;;;:::i;:::-;;:::i;3889:193::-;;;;;;:::i;:::-;;:::i;4145:151::-;;;;;;:::i;:::-;;:::i;4616:201::-;4699:4;736:10:3;4755:32:0;736:10:3;4771:7:0;4780:6;4755:8;:32::i;:::-;-1:-1:-1;4805:4:0;;4616:201;-1:-1:-1;;;4616:201:0:o;5397:295::-;5528:4;736:10:3;5586:38:0;5602:4;736:10:3;5617:6:0;5586:15;:38::i;:::-;5635:27;5645:4;5651:2;5655:6;5635:9;:27::i;:::-;-1:-1:-1;5680:4:0;;5397:295;-1:-1:-1;;;;5397:295:0:o;6101:238::-;6189:4;736:10:3;6245:64:0;736:10:3;6261:7:0;6298:10;6270:25;736:10:3;6261:7:0;6270:9;:25::i;:::-;:38;;;;:::i;:::-;6245:8;:64::i;6842:436::-;6935:4;736:10:3;6935:4:0;7018:25;736:10:3;7035:7:0;7018:9;:25::i;:::-;6991:52;;7082:15;7062:16;:35;;7054:85;;;;-1:-1:-1;;;7054:85:0;;2046:2:4;7054:85:0;;;2028:21:4;2085:2;2065:18;;;2058:30;2124:34;2104:18;;;2097:62;-1:-1:-1;;;2175:18:4;;;2168:35;2220:19;;7054:85:0;;;;;;;;;7175:60;7184:5;7191:7;7219:15;7200:16;:34;7175:8;:60::i;3889:193::-;3968:4;736:10:3;4024:28:0;736:10:3;4041:2:0;4045:6;4024:9;:28::i;4145:151::-;-1:-1:-1;;;;;4261:18:0;;;4234:7;4261:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4145:151::o;10467:380::-;-1:-1:-1;;;;;10603:19:0;;10595:68;;;;-1:-1:-1;;;10595:68:0;;2452:2:4;10595:68:0;;;2434:21:4;2491:2;2471:18;;;2464:30;2530:34;2510:18;;;2503:62;-1:-1:-1;;;2581:18:4;;;2574:34;2625:19;;10595:68:0;2250:400:4;10595:68:0;-1:-1:-1;;;;;10682:21:0;;10674:68;;;;-1:-1:-1;;;10674:68:0;;2857:2:4;10674:68:0;;;2839:21:4;2896:2;2876:18;;;2869:30;2935:34;2915:18;;;2908:62;-1:-1:-1;;;2986:18:4;;;2979:32;3028:19;;10674:68:0;2655:398:4;10674:68:0;-1:-1:-1;;;;;10755:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10807:32;;789:25:4;;;10807:32:0;;762:18:4;10807:32:0;;;;;;;10467:380;;;:::o;11138:453::-;11273:24;11300:25;11310:5;11317:7;11300:9;:25::i;:::-;11273:52;;-1:-1:-1;;11340:16:0;:37;11336:248;;11422:6;11402:16;:26;;11394:68;;;;-1:-1:-1;;;11394:68:0;;3260:2:4;11394:68:0;;;3242:21:4;3299:2;3279:18;;;3272:30;3338:31;3318:18;;;3311:59;3387:18;;11394:68:0;3058:353:4;11394:68:0;11506:51;11515:5;11522:7;11550:6;11531:16;:25;11506:8;:51::i;:::-;11262:329;11138:453;;;:::o;7748:671::-;-1:-1:-1;;;;;7879:18:0;;7871:68;;;;-1:-1:-1;;;7871:68:0;;3618:2:4;7871:68:0;;;3600:21:4;3657:2;3637:18;;;3630:30;3696:34;3676:18;;;3669:62;-1:-1:-1;;;3747:18:4;;;3740:35;3792:19;;7871:68:0;3416:401:4;7871:68:0;-1:-1:-1;;;;;7958:16:0;;7950:64;;;;-1:-1:-1;;;7950:64:0;;4024:2:4;7950:64:0;;;4006:21:4;4063:2;4043:18;;;4036:30;4102:34;4082:18;;;4075:62;-1:-1:-1;;;4153:18:4;;;4146:33;4196:19;;7950:64:0;3822:399:4;7950:64:0;-1:-1:-1;;;;;8100:15:0;;8078:19;8100:15;;;;;;;;;;;8134:21;;;;8126:72;;;;-1:-1:-1;;;8126:72:0;;4428:2:4;8126:72:0;;;4410:21:4;4467:2;4447:18;;;4440:30;4506:34;4486:18;;;4479:62;-1:-1:-1;;;4557:18:4;;;4550:36;4603:19;;8126:72:0;4226:402:4;8126:72:0;-1:-1:-1;;;;;8234:15:0;;;:9;:15;;;;;;;;;;;8252:20;;;8234:38;;8294:13;;;;;;;;:23;;8266:6;;8234:9;8294:23;;8266:6;;8294:23;:::i;:::-;;;;;;;;8350:2;-1:-1:-1;;;;;8335:26:0;8344:4;-1:-1:-1;;;;;8335:26:0;;8354:6;8335:26;;;;789:25:4;;777:2;762:18;;643:177;8335:26:0;;;;;;;;8374:37;12191:125;14:173:4;82:20;;-1:-1:-1;;;;;131:31:4;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:4:o;825:328::-;902:6;910;918;971:2;959:9;950:7;946:23;942:32;939:52;;;987:1;984;977:12;939:52;1010:29;1029:9;1010:29;:::i;:::-;1000:39;;1058:38;1092:2;1081:9;1077:18;1058:38;:::i;:::-;1048:48;;1143:2;1132:9;1128:18;1115:32;1105:42;;825:328;;;;;:::o;1158:186::-;1217:6;1270:2;1258:9;1249:7;1245:23;1241:32;1238:52;;;1286:1;1283;1276:12;1238:52;1309:29;1328:9;1309:29;:::i;:::-;1299:39;1158:186;-1:-1:-1;;;1158:186:4:o;1349:260::-;1417:6;1425;1478:2;1466:9;1457:7;1453:23;1449:32;1446:52;;;1494:1;1491;1484:12;1446:52;1517:29;1536:9;1517:29;:::i;:::-;1507:39;;1565:38;1599:2;1588:9;1584:18;1565:38;:::i;:::-;1555:48;;1349:260;;;;;:::o;1614:225::-;1654:3;1685:1;1681:6;1678:1;1675:13;1672:136;;;1730:10;1725:3;1721:20;1718:1;1711:31;1765:4;1762:1;1755:15;1793:4;1790:1;1783:15;1672:136;-1:-1:-1;1824:9:4;;1614:225::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "359400",
								"executionCost": "399",
								"totalCost": "359799"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24591",
								"balanceOf(address)": "2540",
								"decreaseAllowance(address,uint256)": "26961",
								"increaseAllowance(address,uint256)": "27034",
								"totalSupply()": "2304",
								"transfer(address,uint256)": "51215",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1437,
									"end": 13047,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 1437,
									"end": 13047,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1437,
									"end": 13047,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 2037,
									"end": 2117,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 2037,
									"end": 2117,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2037,
									"end": 2117,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 2037,
									"end": 2117,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2037,
									"end": 2117,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 2037,
									"end": 2117,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2037,
									"end": 2117,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2037,
									"end": 2117,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 2037,
									"end": 2117,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2037,
									"end": 2117,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2037,
									"end": 2117,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1437,
									"end": 13047,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1437,
									"end": 13047,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1437,
									"end": 13047,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1437,
									"end": 13047,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1437,
									"end": 13047,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1437,
									"end": 13047,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1437,
									"end": 13047,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204b68ec20ceb6e086e26b0abd0db3cf89266177148496eceb359fba58cdd0c90464736f6c63430008090033",
									".code": [
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "A457C2D7"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "18160DDD"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1437,
											"end": 13047,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 616,
											"end": 630,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 616,
											"end": 630,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 609,
											"end": 631,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 591,
											"end": 632,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 591,
											"end": 632,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 579,
											"end": 581,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 564,
											"end": 582,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3385,
											"end": 3493,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3385,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3473,
											"end": 3485,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 3473,
											"end": 3485,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3385,
											"end": 3493,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 3385,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3385,
											"end": 3493,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3385,
											"end": 3493,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 789,
											"end": 814,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 789,
											"end": 814,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 789,
											"end": 814,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 777,
											"end": 779,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 762,
											"end": 780,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3385,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 643,
											"end": 820,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3556,
											"end": 3683,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 3556,
											"end": 3683,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3556,
											"end": 3683,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 3556,
											"end": 3683,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 3556,
											"end": 3683,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3556,
											"end": 3683,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3556,
											"end": 3683,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 3556,
											"end": 3683,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3556,
											"end": 3683,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 3556,
											"end": 3683,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3630,
											"end": 3637,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3556,
											"end": 3683,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "tag",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4699,
											"end": 4703,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 4755,
											"end": 4787,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4771,
											"end": 4778,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4755,
											"end": 4763,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 4755,
											"end": 4787,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4755,
											"end": 4787,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 4755,
											"end": 4787,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4805,
											"end": 4809,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4805,
											"end": 4809,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4616,
											"end": 4817,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5528,
											"end": 5532,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 5586,
											"end": 5624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 5602,
											"end": 5606,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5617,
											"end": 5623,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5586,
											"end": 5601,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 5586,
											"end": 5624,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5586,
											"end": 5624,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 5586,
											"end": 5624,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5635,
											"end": 5662,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 5645,
											"end": 5649,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5651,
											"end": 5653,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5655,
											"end": 5661,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5635,
											"end": 5644,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 5635,
											"end": 5662,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5635,
											"end": 5662,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 5635,
											"end": 5662,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5680,
											"end": 5684,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5680,
											"end": 5684,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5397,
											"end": 5692,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 6101,
											"end": 6339,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6189,
											"end": 6193,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 6245,
											"end": 6309,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6261,
											"end": 6268,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6298,
											"end": 6308,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6270,
											"end": 6295,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6261,
											"end": 6268,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6270,
											"end": 6279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 6270,
											"end": 6295,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6270,
											"end": 6295,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 6270,
											"end": 6295,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6270,
											"end": 6308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 6270,
											"end": 6308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6270,
											"end": 6308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6270,
											"end": 6308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 6270,
											"end": 6308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6270,
											"end": 6308,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 6270,
											"end": 6308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6245,
											"end": 6253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 6245,
											"end": 6309,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 6842,
											"end": 7278,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6935,
											"end": 6939,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 6935,
											"end": 6939,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7043,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7035,
											"end": 7042,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7027,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 7018,
											"end": 7043,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7018,
											"end": 7043,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 7018,
											"end": 7043,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6991,
											"end": 7043,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6991,
											"end": 7043,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7082,
											"end": 7097,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7062,
											"end": 7078,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7062,
											"end": 7097,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 7062,
											"end": 7097,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2046,
											"end": 2048,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2028,
											"end": 2049,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2085,
											"end": 2087,
											"name": "PUSH",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 2065,
											"end": 2083,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2065,
											"end": 2083,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2065,
											"end": 2083,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2058,
											"end": 2088,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2124,
											"end": 2158,
											"name": "PUSH",
											"source": 4,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 2104,
											"end": 2122,
											"name": "PUSH",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 2104,
											"end": 2122,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2104,
											"end": 2122,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2097,
											"end": 2159,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2175,
											"end": 2193,
											"name": "PUSH",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 2175,
											"end": 2193,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2175,
											"end": 2193,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2168,
											"end": 2203,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2220,
											"end": 2239,
											"name": "PUSH",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 2220,
											"end": 2239,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 7054,
											"end": 7139,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7175,
											"end": 7235,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 7184,
											"end": 7189,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7191,
											"end": 7198,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7219,
											"end": 7234,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7200,
											"end": 7216,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7200,
											"end": 7234,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7175,
											"end": 7183,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 7175,
											"end": 7235,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 3889,
											"end": 4082,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3968,
											"end": 3972,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 4024,
											"end": 4052,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 736,
											"end": 746,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4041,
											"end": 4043,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4045,
											"end": 4051,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4024,
											"end": 4033,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 4024,
											"end": 4052,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4234,
											"end": 4241,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4272,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4279,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4261,
											"end": 4288,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4145,
											"end": 4296,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 10467,
											"end": 10847,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 10467,
											"end": 10847,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10603,
											"end": 10622,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10603,
											"end": 10622,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10595,
											"end": 10663,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 10595,
											"end": 10663,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10595,
											"end": 10663,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10595,
											"end": 10663,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10595,
											"end": 10663,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10595,
											"end": 10663,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2452,
											"end": 2454,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10595,
											"end": 10663,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 10595,
											"end": 10663,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10595,
											"end": 10663,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2434,
											"end": 2455,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2491,
											"end": 2493,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2471,
											"end": 2489,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2471,
											"end": 2489,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2471,
											"end": 2489,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2464,
											"end": 2494,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2530,
											"end": 2564,
											"name": "PUSH",
											"source": 4,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 2510,
											"end": 2528,
											"name": "PUSH",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 2510,
											"end": 2528,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2510,
											"end": 2528,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2503,
											"end": 2565,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2581,
											"end": 2599,
											"name": "PUSH",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 2581,
											"end": 2599,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2581,
											"end": 2599,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2574,
											"end": 2608,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2625,
											"end": 2644,
											"name": "PUSH",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 2625,
											"end": 2644,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10595,
											"end": 10663,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 2250,
											"end": 2650,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10595,
											"end": 10663,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 10595,
											"end": 10663,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10682,
											"end": 10703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10682,
											"end": 10703,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10674,
											"end": 10742,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 10674,
											"end": 10742,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10674,
											"end": 10742,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10674,
											"end": 10742,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10674,
											"end": 10742,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10674,
											"end": 10742,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2857,
											"end": 2859,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10674,
											"end": 10742,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 10674,
											"end": 10742,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10674,
											"end": 10742,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2839,
											"end": 2860,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2896,
											"end": 2898,
											"name": "PUSH",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 2876,
											"end": 2894,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2876,
											"end": 2894,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2876,
											"end": 2894,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2869,
											"end": 2899,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2935,
											"end": 2969,
											"name": "PUSH",
											"source": 4,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 2915,
											"end": 2933,
											"name": "PUSH",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 2915,
											"end": 2933,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2915,
											"end": 2933,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2908,
											"end": 2970,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2986,
											"end": 3004,
											"name": "PUSH",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 2986,
											"end": 3004,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2986,
											"end": 3004,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2979,
											"end": 3011,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3028,
											"end": 3047,
											"name": "PUSH",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 3028,
											"end": 3047,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10674,
											"end": 10742,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 2655,
											"end": 3053,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10674,
											"end": 10742,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 10674,
											"end": 10742,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10766,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10773,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10782,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10791,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10791,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10791,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 10807,
											"end": 10839,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10807,
											"end": 10839,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 789,
											"end": 814,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 789,
											"end": 814,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 789,
											"end": 814,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10807,
											"end": 10839,
											"name": "PUSH",
											"source": 0,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10807,
											"end": 10839,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 762,
											"end": 780,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10807,
											"end": 10839,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10807,
											"end": 10839,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10807,
											"end": 10839,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10807,
											"end": 10839,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10807,
											"end": 10839,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 10807,
											"end": 10839,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10807,
											"end": 10839,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 10467,
											"end": 10847,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10467,
											"end": 10847,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10467,
											"end": 10847,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10467,
											"end": 10847,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 11138,
											"end": 11591,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 11138,
											"end": 11591,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11273,
											"end": 11297,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11300,
											"end": 11325,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 11310,
											"end": 11315,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11317,
											"end": 11324,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11300,
											"end": 11309,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 11300,
											"end": 11325,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11300,
											"end": 11325,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 11300,
											"end": 11325,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11273,
											"end": 11325,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11273,
											"end": 11325,
											"name": "POP",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11340,
											"end": 11356,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11340,
											"end": 11377,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 11336,
											"end": 11584,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 11336,
											"end": 11584,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11422,
											"end": 11428,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11402,
											"end": 11418,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11402,
											"end": 11428,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 11402,
											"end": 11428,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 11394,
											"end": 11462,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 11394,
											"end": 11462,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11394,
											"end": 11462,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11394,
											"end": 11462,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11394,
											"end": 11462,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11394,
											"end": 11462,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3260,
											"end": 3262,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 11394,
											"end": 11462,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11394,
											"end": 11462,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11394,
											"end": 11462,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3242,
											"end": 3263,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3299,
											"end": 3301,
											"name": "PUSH",
											"source": 4,
											"value": "1D"
										},
										{
											"begin": 3279,
											"end": 3297,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 3279,
											"end": 3297,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3279,
											"end": 3297,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3272,
											"end": 3302,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3338,
											"end": 3369,
											"name": "PUSH",
											"source": 4,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 3318,
											"end": 3336,
											"name": "PUSH",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 3318,
											"end": 3336,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3318,
											"end": 3336,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3311,
											"end": 3370,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3387,
											"end": 3405,
											"name": "PUSH",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 3387,
											"end": 3405,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 11394,
											"end": 11462,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 3058,
											"end": 3411,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 11394,
											"end": 11462,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 11394,
											"end": 11462,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11506,
											"end": 11557,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 11515,
											"end": 11520,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11522,
											"end": 11529,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11550,
											"end": 11556,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11531,
											"end": 11547,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11531,
											"end": 11556,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11506,
											"end": 11514,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 11506,
											"end": 11557,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11506,
											"end": 11557,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 11506,
											"end": 11557,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11262,
											"end": 11591,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11138,
											"end": 11591,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11138,
											"end": 11591,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11138,
											"end": 11591,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11138,
											"end": 11591,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7748,
											"end": 8419,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 7748,
											"end": 8419,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7879,
											"end": 7897,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7879,
											"end": 7897,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7871,
											"end": 7939,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 7871,
											"end": 7939,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7871,
											"end": 7939,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7871,
											"end": 7939,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7871,
											"end": 7939,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7871,
											"end": 7939,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3618,
											"end": 3620,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 7871,
											"end": 7939,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7871,
											"end": 7939,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7871,
											"end": 7939,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3600,
											"end": 3621,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3659,
											"name": "PUSH",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 3637,
											"end": 3655,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 3637,
											"end": 3655,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3637,
											"end": 3655,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3630,
											"end": 3660,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3696,
											"end": 3730,
											"name": "PUSH",
											"source": 4,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 3676,
											"end": 3694,
											"name": "PUSH",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 3676,
											"end": 3694,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3676,
											"end": 3694,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3669,
											"end": 3731,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3747,
											"end": 3765,
											"name": "PUSH",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 3747,
											"end": 3765,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3747,
											"end": 3765,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3740,
											"end": 3775,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3792,
											"end": 3811,
											"name": "PUSH",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 3792,
											"end": 3811,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7939,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 3416,
											"end": 3817,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7939,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 7871,
											"end": 7939,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7958,
											"end": 7974,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7958,
											"end": 7974,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7950,
											"end": 8014,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 7950,
											"end": 8014,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7950,
											"end": 8014,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7950,
											"end": 8014,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7950,
											"end": 8014,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7950,
											"end": 8014,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4024,
											"end": 4026,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 7950,
											"end": 8014,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7950,
											"end": 8014,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7950,
											"end": 8014,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4006,
											"end": 4027,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4063,
											"end": 4065,
											"name": "PUSH",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 4043,
											"end": 4061,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 4043,
											"end": 4061,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4043,
											"end": 4061,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4036,
											"end": 4066,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4102,
											"end": 4136,
											"name": "PUSH",
											"source": 4,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 4082,
											"end": 4100,
											"name": "PUSH",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 4082,
											"end": 4100,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4082,
											"end": 4100,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4075,
											"end": 4137,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4153,
											"end": 4171,
											"name": "PUSH",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 4153,
											"end": 4171,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4153,
											"end": 4171,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4146,
											"end": 4179,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4196,
											"end": 4215,
											"name": "PUSH",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 4196,
											"end": 4215,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7950,
											"end": 8014,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 3822,
											"end": 4221,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7950,
											"end": 8014,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 7950,
											"end": 8014,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8078,
											"end": 8097,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8100,
											"end": 8115,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8134,
											"end": 8155,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8134,
											"end": 8155,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8134,
											"end": 8155,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 8134,
											"end": 8155,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8126,
											"end": 8198,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 8126,
											"end": 8198,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8126,
											"end": 8198,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8126,
											"end": 8198,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8126,
											"end": 8198,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8126,
											"end": 8198,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4428,
											"end": 4430,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8126,
											"end": 8198,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8126,
											"end": 8198,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8126,
											"end": 8198,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4431,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4467,
											"end": 4469,
											"name": "PUSH",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 4447,
											"end": 4465,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 4447,
											"end": 4465,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4447,
											"end": 4465,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 4470,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4506,
											"end": 4540,
											"name": "PUSH",
											"source": 4,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 4486,
											"end": 4504,
											"name": "PUSH",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 4486,
											"end": 4504,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4486,
											"end": 4504,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4479,
											"end": 4541,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4557,
											"end": 4575,
											"name": "PUSH",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 4557,
											"end": 4575,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4557,
											"end": 4575,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4550,
											"end": 4586,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4603,
											"end": 4622,
											"name": "PUSH",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 4603,
											"end": 4622,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8126,
											"end": 8198,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 4226,
											"end": 4628,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8126,
											"end": 8198,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 8126,
											"end": 8198,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8243,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8249,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8272,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8272,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8307,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8307,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8307,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8307,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8307,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8307,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8307,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8307,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8266,
											"end": 8272,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8266,
											"end": 8272,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8234,
											"end": 8243,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8266,
											"end": 8272,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8266,
											"end": 8272,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 8294,
											"end": 8317,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8350,
											"end": 8352,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8344,
											"end": 8348,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "PUSH",
											"source": 0,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8354,
											"end": 8360,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 789,
											"end": 814,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 789,
											"end": 814,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 777,
											"end": 779,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 762,
											"end": 780,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 762,
											"end": 780,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 643,
											"end": 820,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8335,
											"end": 8361,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 8374,
											"end": 8411,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 12191,
											"end": 12316,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 111,
											"end": 181,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 111,
											"end": 181,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 111,
											"end": 181,
											"name": "tag",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 111,
											"end": 181,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 14,
											"end": 187,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 14,
											"end": 187,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 14,
											"end": 187,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 192,
											"end": 446,
											"name": "tag",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 192,
											"end": 446,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 260,
											"end": 266,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 274,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 321,
											"end": 323,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 309,
											"end": 318,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 300,
											"end": 307,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 296,
											"end": 319,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 292,
											"end": 324,
											"name": "SLT",
											"source": 4
										},
										{
											"begin": 289,
											"end": 341,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 289,
											"end": 341,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 289,
											"end": 341,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 337,
											"end": 338,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 334,
											"end": 335,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 327,
											"end": 339,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 289,
											"end": 341,
											"name": "tag",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 289,
											"end": 341,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 360,
											"end": 389,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "119"
										},
										{
											"begin": 379,
											"end": 388,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 360,
											"end": 389,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 360,
											"end": 389,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 360,
											"end": 389,
											"name": "tag",
											"source": 4,
											"value": "119"
										},
										{
											"begin": 360,
											"end": 389,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 350,
											"end": 389,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 436,
											"end": 438,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 421,
											"end": 439,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 421,
											"end": 439,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 421,
											"end": 439,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 421,
											"end": 439,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 408,
											"end": 440,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 408,
											"end": 440,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 192,
											"end": 446,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 825,
											"end": 1153,
											"name": "tag",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 825,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 902,
											"end": 908,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 910,
											"end": 916,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 918,
											"end": 924,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 971,
											"end": 973,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 959,
											"end": 968,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 950,
											"end": 957,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 946,
											"end": 969,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 942,
											"end": 974,
											"name": "SLT",
											"source": 4
										},
										{
											"begin": 939,
											"end": 991,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 939,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 939,
											"end": 991,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 987,
											"end": 988,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 984,
											"end": 985,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 977,
											"end": 989,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 939,
											"end": 991,
											"name": "tag",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 939,
											"end": 991,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1010,
											"end": 1039,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1010,
											"end": 1039,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 1010,
											"end": 1039,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1010,
											"end": 1039,
											"name": "tag",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 1010,
											"end": 1039,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1000,
											"end": 1039,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1000,
											"end": 1039,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1058,
											"end": 1096,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 1092,
											"end": 1094,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1081,
											"end": 1090,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1077,
											"end": 1095,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1058,
											"end": 1096,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 1058,
											"end": 1096,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1058,
											"end": 1096,
											"name": "tag",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 1058,
											"end": 1096,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1048,
											"end": 1096,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1048,
											"end": 1096,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1145,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1132,
											"end": 1141,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1128,
											"end": 1146,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1115,
											"end": 1147,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 1105,
											"end": 1147,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1105,
											"end": 1147,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 825,
											"end": 1153,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 825,
											"end": 1153,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 825,
											"end": 1153,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 825,
											"end": 1153,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 825,
											"end": 1153,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 825,
											"end": 1153,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1158,
											"end": 1344,
											"name": "tag",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 1158,
											"end": 1344,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1223,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1270,
											"end": 1272,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1258,
											"end": 1267,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1249,
											"end": 1256,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1245,
											"end": 1268,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1241,
											"end": 1273,
											"name": "SLT",
											"source": 4
										},
										{
											"begin": 1238,
											"end": 1290,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1238,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 1238,
											"end": 1290,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1286,
											"end": 1287,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1283,
											"end": 1284,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1276,
											"end": 1288,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1238,
											"end": 1290,
											"name": "tag",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 1238,
											"end": 1290,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1309,
											"end": 1338,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 1328,
											"end": 1337,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1309,
											"end": 1338,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 1309,
											"end": 1338,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1309,
											"end": 1338,
											"name": "tag",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 1309,
											"end": 1338,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1299,
											"end": 1338,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 1158,
											"end": 1344,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1158,
											"end": 1344,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1349,
											"end": 1609,
											"name": "tag",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 1349,
											"end": 1609,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1417,
											"end": 1423,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1425,
											"end": 1431,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1478,
											"end": 1480,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1466,
											"end": 1475,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1457,
											"end": 1464,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1453,
											"end": 1476,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1449,
											"end": 1481,
											"name": "SLT",
											"source": 4
										},
										{
											"begin": 1446,
											"end": 1498,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1446,
											"end": 1498,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "130"
										},
										{
											"begin": 1446,
											"end": 1498,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1494,
											"end": 1495,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1491,
											"end": 1492,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1484,
											"end": 1496,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1446,
											"end": 1498,
											"name": "tag",
											"source": 4,
											"value": "130"
										},
										{
											"begin": 1446,
											"end": 1498,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1546,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 1536,
											"end": 1545,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1546,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 1517,
											"end": 1546,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1517,
											"end": 1546,
											"name": "tag",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 1517,
											"end": 1546,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1507,
											"end": 1546,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1507,
											"end": 1546,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1565,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 1599,
											"end": 1601,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1588,
											"end": 1597,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1584,
											"end": 1602,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1565,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 1565,
											"end": 1603,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1565,
											"end": 1603,
											"name": "tag",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 1565,
											"end": 1603,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1555,
											"end": 1603,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1555,
											"end": 1603,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1349,
											"end": 1609,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1349,
											"end": 1609,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1349,
											"end": 1609,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1349,
											"end": 1609,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1349,
											"end": 1609,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1349,
											"end": 1609,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1614,
											"end": 1839,
											"name": "tag",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 1614,
											"end": 1839,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1654,
											"end": 1657,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1685,
											"end": 1686,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1681,
											"end": 1687,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1678,
											"end": 1679,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1688,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 1672,
											"end": 1808,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1672,
											"end": 1808,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 1672,
											"end": 1808,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1730,
											"end": 1740,
											"name": "PUSH",
											"source": 4,
											"value": "4E487B71"
										},
										{
											"begin": 1725,
											"end": 1728,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 1718,
											"end": 1719,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1711,
											"end": 1742,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1765,
											"end": 1769,
											"name": "PUSH",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 1762,
											"end": 1763,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1755,
											"end": 1770,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1793,
											"end": 1797,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1790,
											"end": 1791,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1783,
											"end": 1798,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1672,
											"end": 1808,
											"name": "tag",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 1672,
											"end": 1808,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1824,
											"end": 1833,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1824,
											"end": 1833,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1614,
											"end": 1839,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x327750ab0ec053c3da06bce4143cf44a521f8dd31778098b2ec3121a75b8fc10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://97bafee50a60a5d9c831522a0a76113c815332155f8a63917541b24104969357\",\"dweb:/ipfs/QmZUDE5Ehw2b731AyhYRPAydM94KTZ6jXfejMQ1w5Uvd8k\"]},\"contracts/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xdd286f7283325eb12ee50e41dac6be9665262e827b66f4f8952111ff77b6a130\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://567e5cfe5c64fb8c5f041393d42178447cf00880a2a2172a5a8e83131e1c24fa\",\"dweb:/ipfs/QmY6KVSBk5xbtZuyhcQPNyJAATMZnmJ45TcBBAE7rzD5du\"]},\"contracts/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x248dcb11d9b150cad30e98d6ecc6b03ea703c731a6aaaccb3abe52513aeeb12e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6f9d1cd1bcd90b38e0c07efecd7a4aafb1d41567cdcb7a0e0e80cbb924ff291\",\"dweb:/ipfs/QmXd3uPUma5bMPk7MNjuQnSgbGVrvZTxp4yg98RB8G51Df\"]},\"contracts/openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 15,
								"contract": "contracts/openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 21,
								"contract": "contracts/openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 23,
								"contract": "contracts/openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xdd286f7283325eb12ee50e41dac6be9665262e827b66f4f8952111ff77b6a130\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://567e5cfe5c64fb8c5f041393d42178447cf00880a2a2172a5a8e83131e1c24fa\",\"dweb:/ipfs/QmY6KVSBk5xbtZuyhcQPNyJAATMZnmJ45TcBBAE7rzD5du\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xdd286f7283325eb12ee50e41dac6be9665262e827b66f4f8952111ff77b6a130\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://567e5cfe5c64fb8c5f041393d42178447cf00880a2a2172a5a8e83131e1c24fa\",\"dweb:/ipfs/QmY6KVSBk5xbtZuyhcQPNyJAATMZnmJ45TcBBAE7rzD5du\"]},\"contracts/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x248dcb11d9b150cad30e98d6ecc6b03ea703c731a6aaaccb3abe52513aeeb12e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6f9d1cd1bcd90b38e0c07efecd7a4aafb1d41567cdcb7a0e0e80cbb924ff291\",\"dweb:/ipfs/QmXd3uPUma5bMPk7MNjuQnSgbGVrvZTxp4yg98RB8G51Df\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "contracts/openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							646
						],
						"ERC20": [
							539
						],
						"IERC20": [
							617
						],
						"IERC20Metadata": [
							624
						]
					},
					"id": 540,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "contracts/openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 540,
							"sourceUnit": 618,
							"src": "135:22:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 540,
							"sourceUnit": 625,
							"src": "159:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 540,
							"sourceUnit": 647,
							"src": "202:33:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 6,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 646,
										"src": "1455:7:0"
									},
									"id": 7,
									"nodeType": "InheritanceSpecifier",
									"src": "1455:7:0"
								},
								{
									"baseName": {
										"id": 8,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 617,
										"src": "1464:6:0"
									},
									"id": 9,
									"nodeType": "InheritanceSpecifier",
									"src": "1464:6:0"
								},
								{
									"baseName": {
										"id": 10,
										"name": "IERC20Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 624,
										"src": "1472:14:0"
									},
									"id": 11,
									"nodeType": "InheritanceSpecifier",
									"src": "1472:14:0"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 5,
								"nodeType": "StructuredDocumentation",
								"src": "239:1196:0",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 539,
							"linearizedBaseContracts": [
								539,
								624,
								617,
								646
							],
							"name": "ERC20",
							"nameLocation": "1446:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 15,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1530:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 539,
									"src": "1494:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 14,
										"keyType": {
											"id": 12,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1502:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1494:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 13,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1513:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 21,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1604:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 539,
									"src": "1548:67:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 20,
										"keyType": {
											"id": 16,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1556:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1548:47:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 19,
											"keyType": {
												"id": 17,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:27:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 18,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1586:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 23,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1640:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 539,
									"src": "1624:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 22,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1624:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 27,
										"nodeType": "Block",
										"src": "2051:66:0",
										"statements": []
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "1725:306:0",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 28,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2048:2:0"
									},
									"returnParameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2051:0:0"
									},
									"scope": 539,
									"src": "2037:80:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										566
									],
									"body": {
										"id": 37,
										"nodeType": "Block",
										"src": "3455:38:0",
										"statements": [
											{
												"expression": {
													"id": 35,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 23,
													"src": "3473:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 34,
												"id": 36,
												"nodeType": "Return",
												"src": "3466:19:0"
											}
										]
									},
									"documentation": {
										"id": 29,
										"nodeType": "StructuredDocumentation",
										"src": "3328:51:0",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 38,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3394:11:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 31,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3428:8:0"
									},
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3405:2:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 38,
												"src": "3446:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 32,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3446:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3445:9:0"
									},
									"scope": 539,
									"src": "3385:108:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										574
									],
									"body": {
										"id": 51,
										"nodeType": "Block",
										"src": "3639:44:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 47,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "3657:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 49,
													"indexExpression": {
														"id": 48,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 41,
														"src": "3667:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3657:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 46,
												"id": 50,
												"nodeType": "Return",
												"src": "3650:25:0"
											}
										]
									},
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "3501:49:0",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 52,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3565:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 43,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3612:8:0"
									},
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3583:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "3575:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 40,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3575:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3574:17:0"
									},
									"returnParameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "3630:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 44,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3630:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3629:9:0"
									},
									"scope": 539,
									"src": "3556:127:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										584
									],
									"body": {
										"id": 76,
										"nodeType": "Block",
										"src": "3974:108:0",
										"statements": [
											{
												"assignments": [
													64
												],
												"declarations": [
													{
														"constant": false,
														"id": 64,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3993:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 76,
														"src": "3985:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 63,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 67,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 65,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 636,
														"src": "4001:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 66,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4001:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3985:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 69,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 64,
															"src": "4034:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 70,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 55,
															"src": "4041:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 71,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 57,
															"src": "4045:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 68,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 300,
														"src": "4024:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 72,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4024:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 73,
												"nodeType": "ExpressionStatement",
												"src": "4024:28:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 74,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4070:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 62,
												"id": 75,
												"nodeType": "Return",
												"src": "4063:11:0"
											}
										]
									},
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "3691:192:0",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 77,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3898:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 59,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3950:8:0"
									},
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3915:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "3907:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3907:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3927:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "3919:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 56,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3919:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3906:28:0"
									},
									"returnParameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "3968:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 60,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3968:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3967:6:0"
									},
									"scope": 539,
									"src": "3889:193:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										594
									],
									"body": {
										"id": 94,
										"nodeType": "Block",
										"src": "4243:53:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 88,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 21,
															"src": "4261:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 90,
														"indexExpression": {
															"id": 89,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 80,
															"src": "4273:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4261:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 92,
													"indexExpression": {
														"id": 91,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 82,
														"src": "4280:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4261:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 87,
												"id": 93,
												"nodeType": "Return",
												"src": "4254:34:0"
											}
										]
									},
									"documentation": {
										"id": 78,
										"nodeType": "StructuredDocumentation",
										"src": "4090:49:0",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 95,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4154:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 84,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4216:8:0"
									},
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4172:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "4164:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 79,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4164:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4187:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "4179:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 81,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4179:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4163:32:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "4234:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 85,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4234:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4233:9:0"
									},
									"scope": 539,
									"src": "4145:151:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										604
									],
									"body": {
										"id": 119,
										"nodeType": "Block",
										"src": "4705:112:0",
										"statements": [
											{
												"assignments": [
													107
												],
												"declarations": [
													{
														"constant": false,
														"id": 107,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4724:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 119,
														"src": "4716:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 106,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4716:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 110,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 108,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 636,
														"src": "4732:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4732:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4716:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 112,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 107,
															"src": "4764:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 113,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "4771:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 114,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "4780:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 111,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 473,
														"src": "4755:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4755:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 116,
												"nodeType": "ExpressionStatement",
												"src": "4755:32:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 117,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4805:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 105,
												"id": 118,
												"nodeType": "Return",
												"src": "4798:11:0"
											}
										]
									},
									"documentation": {
										"id": 96,
										"nodeType": "StructuredDocumentation",
										"src": "4304:306:0",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 120,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4625:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 102,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4681:8:0"
									},
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 98,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4641:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "4633:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 97,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4633:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4658:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "4650:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 99,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4650:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4632:33:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "4699:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 103,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4699:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4698:6:0"
									},
									"scope": 539,
									"src": "4616:201:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										616
									],
									"body": {
										"id": 152,
										"nodeType": "Block",
										"src": "5534:158:0",
										"statements": [
											{
												"assignments": [
													134
												],
												"declarations": [
													{
														"constant": false,
														"id": 134,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5553:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 152,
														"src": "5545:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 133,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5545:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 137,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 135,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 636,
														"src": "5563:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 136,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5563:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5545:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 139,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 123,
															"src": "5602:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 140,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 134,
															"src": "5608:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 141,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 127,
															"src": "5617:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 138,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 516,
														"src": "5586:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5586:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 143,
												"nodeType": "ExpressionStatement",
												"src": "5586:38:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 145,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 123,
															"src": "5645:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 146,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 125,
															"src": "5651:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 147,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 127,
															"src": "5655:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 144,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 300,
														"src": "5635:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5635:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 149,
												"nodeType": "ExpressionStatement",
												"src": "5635:27:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5680:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 132,
												"id": 151,
												"nodeType": "Return",
												"src": "5673:11:0"
											}
										]
									},
									"documentation": {
										"id": 121,
										"nodeType": "StructuredDocumentation",
										"src": "4825:566:0",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 153,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5406:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 129,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5510:8:0"
									},
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5437:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "5429:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 122,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5429:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5460:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "5452:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5452:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5481:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "5473:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5473:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5418:76:0"
									},
									"returnParameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "5528:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 130,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5528:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5527:6:0"
									},
									"scope": 539,
									"src": "5397:295:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 181,
										"nodeType": "Block",
										"src": "6195:144:0",
										"statements": [
											{
												"assignments": [
													164
												],
												"declarations": [
													{
														"constant": false,
														"id": 164,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6214:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 181,
														"src": "6206:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 163,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6206:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 167,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 165,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 636,
														"src": "6222:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6222:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6206:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 169,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 164,
															"src": "6254:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 170,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 156,
															"src": "6261:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 176,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 172,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 164,
																		"src": "6280:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 173,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 156,
																		"src": "6287:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 171,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 95,
																	"src": "6270:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 174,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6270:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 175,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 158,
																"src": "6298:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6270:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 168,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 473,
														"src": "6245:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6245:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 178,
												"nodeType": "ExpressionStatement",
												"src": "6245:64:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 179,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6327:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 162,
												"id": 180,
												"nodeType": "Return",
												"src": "6320:11:0"
											}
										]
									},
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "5700:395:0",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 182,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6110:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6136:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "6128:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6128:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6153:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "6145:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6145:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6127:37:0"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "6189:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 160,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6189:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6188:6:0"
									},
									"scope": 539,
									"src": "6101:238:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 222,
										"nodeType": "Block",
										"src": "6941:337:0",
										"statements": [
											{
												"assignments": [
													193
												],
												"declarations": [
													{
														"constant": false,
														"id": 193,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6960:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 222,
														"src": "6952:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 192,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6952:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 196,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 194,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 636,
														"src": "6968:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6968:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6952:28:0"
											},
											{
												"assignments": [
													198
												],
												"declarations": [
													{
														"constant": false,
														"id": 198,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6999:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 222,
														"src": "6991:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 197,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6991:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 203,
												"initialValue": {
													"arguments": [
														{
															"id": 200,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 193,
															"src": "7028:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 201,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 185,
															"src": "7035:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 199,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 95,
														"src": "7018:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7018:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6991:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 207,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 205,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 198,
																"src": "7062:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 206,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 187,
																"src": "7082:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7062:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 208,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7099:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 204,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7054:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7054:85:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 210,
												"nodeType": "ExpressionStatement",
												"src": "7054:85:0"
											},
											{
												"id": 219,
												"nodeType": "UncheckedBlock",
												"src": "7150:97:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 212,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 193,
																	"src": "7184:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 213,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 185,
																	"src": "7191:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 216,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 214,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 198,
																		"src": "7200:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 215,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 187,
																		"src": "7219:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7200:34:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 211,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 473,
																"src": "7175:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 217,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7175:60:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 218,
														"nodeType": "ExpressionStatement",
														"src": "7175:60:0"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 220,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7266:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 191,
												"id": 221,
												"nodeType": "Return",
												"src": "7259:11:0"
											}
										]
									},
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "6347:489:0",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 223,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6851:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6877:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 223,
												"src": "6869:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6869:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6894:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 223,
												"src": "6886:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6886:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6868:42:0"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 223,
												"src": "6935:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 189,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6935:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6934:6:0"
									},
									"scope": 539,
									"src": "6842:436:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 299,
										"nodeType": "Block",
										"src": "7860:559:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 239,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 234,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 226,
																"src": "7879:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 237,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7895:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 236,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7887:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 235,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7887:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 238,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7887:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7879:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 240,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7899:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 233,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7871:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7871:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 242,
												"nodeType": "ExpressionStatement",
												"src": "7871:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 249,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 244,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 228,
																"src": "7958:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 247,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7972:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7964:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 245,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7964:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7964:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7958:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 250,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7976:37:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 243,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7950:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7950:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 252,
												"nodeType": "ExpressionStatement",
												"src": "7950:64:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 254,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 226,
															"src": "8048:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 255,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 228,
															"src": "8054:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 256,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "8058:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 253,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 527,
														"src": "8027:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8027:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 258,
												"nodeType": "ExpressionStatement",
												"src": "8027:38:0"
											},
											{
												"assignments": [
													260
												],
												"declarations": [
													{
														"constant": false,
														"id": 260,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8086:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 299,
														"src": "8078:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 259,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8078:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 264,
												"initialValue": {
													"baseExpression": {
														"id": 261,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "8100:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 263,
													"indexExpression": {
														"id": 262,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 226,
														"src": "8110:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8100:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8078:37:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 266,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 260,
																"src": "8134:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 267,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 230,
																"src": "8149:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8134:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 269,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8157:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 265,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8126:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8126:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 271,
												"nodeType": "ExpressionStatement",
												"src": "8126:72:0"
											},
											{
												"id": 280,
												"nodeType": "UncheckedBlock",
												"src": "8209:75:0",
												"statements": [
													{
														"expression": {
															"id": 278,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 272,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "8234:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 274,
																"indexExpression": {
																	"id": 273,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 226,
																	"src": "8244:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8234:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 277,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 275,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 260,
																	"src": "8252:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 276,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 230,
																	"src": "8266:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8252:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8234:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 279,
														"nodeType": "ExpressionStatement",
														"src": "8234:38:0"
													}
												]
											},
											{
												"expression": {
													"id": 285,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 281,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "8294:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 283,
														"indexExpression": {
															"id": 282,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 228,
															"src": "8304:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8294:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 284,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 230,
														"src": "8311:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8294:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 286,
												"nodeType": "ExpressionStatement",
												"src": "8294:23:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 288,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 226,
															"src": "8344:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 289,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 228,
															"src": "8350:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 290,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "8354:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 287,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 551,
														"src": "8335:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8335:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 292,
												"nodeType": "EmitStatement",
												"src": "8330:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 294,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 226,
															"src": "8394:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 295,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 228,
															"src": "8400:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 296,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "8404:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 293,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 538,
														"src": "8374:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8374:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 298,
												"nodeType": "ExpressionStatement",
												"src": "8374:37:0"
											}
										]
									},
									"documentation": {
										"id": 224,
										"nodeType": "StructuredDocumentation",
										"src": "7286:456:0",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 300,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7757:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7785:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "7777:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 225,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7777:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7808:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "7800:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7800:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7829:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "7821:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7821:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7766:76:0"
									},
									"returnParameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7860:0:0"
									},
									"scope": 539,
									"src": "7748:671:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 355,
										"nodeType": "Block",
										"src": "8771:334:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 309,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 303,
																"src": "8790:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 312,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8809:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 311,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8801:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 310,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8801:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 313,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8801:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8790:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 315,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8813:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 308,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8782:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8782:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 317,
												"nodeType": "ExpressionStatement",
												"src": "8782:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8889:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 320,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8881:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 319,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8881:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 322,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8881:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 323,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "8893:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 324,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "8902:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 318,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 527,
														"src": "8860:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8860:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 326,
												"nodeType": "ExpressionStatement",
												"src": "8860:49:0"
											},
											{
												"expression": {
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 327,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "8922:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 328,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "8938:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8922:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "8922:22:0"
											},
											{
												"expression": {
													"id": 335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 331,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "8955:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 333,
														"indexExpression": {
															"id": 332,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "8965:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8955:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 334,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "8977:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8955:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 336,
												"nodeType": "ExpressionStatement",
												"src": "8955:28:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 340,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9016:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 339,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9008:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 338,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9008:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 341,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9008:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 342,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "9020:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 343,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "9029:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 337,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 551,
														"src": "8999:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8999:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 345,
												"nodeType": "EmitStatement",
												"src": "8994:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 349,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9077:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 348,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9069:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 347,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9069:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 350,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9069:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 351,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "9081:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 352,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "9090:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 346,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 538,
														"src": "9049:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9049:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 354,
												"nodeType": "ExpressionStatement",
												"src": "9049:48:0"
											}
										]
									},
									"documentation": {
										"id": 301,
										"nodeType": "StructuredDocumentation",
										"src": "8427:273:0",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 356,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8715:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8729:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "8721:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8721:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8746:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "8738:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 304,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8738:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8720:33:0"
									},
									"returnParameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8771:0:0"
									},
									"scope": 539,
									"src": "8706:399:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 427,
										"nodeType": "Block",
										"src": "9503:526:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 370,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 365,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 359,
																"src": "9522:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 368,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9541:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 367,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9533:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 366,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9533:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 369,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9533:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9522:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 371,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9545:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 364,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9514:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 372,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9514:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 373,
												"nodeType": "ExpressionStatement",
												"src": "9514:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 375,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "9615:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 378,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9632:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 377,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9624:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 376,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9624:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 379,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9624:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 380,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "9636:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 374,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 527,
														"src": "9594:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9594:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 382,
												"nodeType": "ExpressionStatement",
												"src": "9594:49:0"
											},
											{
												"assignments": [
													384
												],
												"declarations": [
													{
														"constant": false,
														"id": 384,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9664:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 427,
														"src": "9656:22:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 383,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9656:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 388,
												"initialValue": {
													"baseExpression": {
														"id": 385,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "9681:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 387,
													"indexExpression": {
														"id": 386,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 359,
														"src": "9691:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9681:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9656:43:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 392,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 390,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 384,
																"src": "9718:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 391,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 361,
																"src": "9736:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9718:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 393,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9744:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 389,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9710:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9710:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 395,
												"nodeType": "ExpressionStatement",
												"src": "9710:71:0"
											},
											{
												"id": 404,
												"nodeType": "UncheckedBlock",
												"src": "9792:81:0",
												"statements": [
													{
														"expression": {
															"id": 402,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 396,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "9817:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 398,
																"indexExpression": {
																	"id": 397,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 359,
																	"src": "9827:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9817:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 401,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 399,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 384,
																	"src": "9838:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 400,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 361,
																	"src": "9855:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9838:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9817:44:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 403,
														"nodeType": "ExpressionStatement",
														"src": "9817:44:0"
													}
												]
											},
											{
												"expression": {
													"id": 407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 405,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "9883:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 406,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 361,
														"src": "9899:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9883:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 408,
												"nodeType": "ExpressionStatement",
												"src": "9883:22:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 410,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "9932:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 413,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9949:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 412,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9941:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 411,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9941:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 414,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9941:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 415,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "9953:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 409,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 551,
														"src": "9923:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9923:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 417,
												"nodeType": "EmitStatement",
												"src": "9918:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 419,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "9993:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 422,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10010:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 421,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10002:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 420,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10002:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 423,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10002:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 424,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "10014:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 418,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 538,
														"src": "9973:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9973:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 426,
												"nodeType": "ExpressionStatement",
												"src": "9973:48:0"
											}
										]
									},
									"documentation": {
										"id": 357,
										"nodeType": "StructuredDocumentation",
										"src": "9113:319:0",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 428,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9447:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9461:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 428,
												"src": "9453:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 358,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9453:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9478:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 428,
												"src": "9470:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9470:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9452:33:0"
									},
									"returnParameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9503:0:0"
									},
									"scope": 539,
									"src": "9438:591:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 472,
										"nodeType": "Block",
										"src": "10584:263:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 444,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 439,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 431,
																"src": "10603:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 442,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10620:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 441,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10612:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 440,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10612:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 443,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10612:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10603:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 445,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10624:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 438,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10595:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10595:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 447,
												"nodeType": "ExpressionStatement",
												"src": "10595:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 449,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 433,
																"src": "10682:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 452,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10701:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 451,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10693:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 450,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10693:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 453,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10693:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10682:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 455,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10705:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 448,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10674:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10674:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 457,
												"nodeType": "ExpressionStatement",
												"src": "10674:68:0"
											},
											{
												"expression": {
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 458,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 21,
																"src": "10755:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 461,
															"indexExpression": {
																"id": 459,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 431,
																"src": "10767:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10755:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 462,
														"indexExpression": {
															"id": 460,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 433,
															"src": "10774:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10755:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 463,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 435,
														"src": "10785:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10755:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 465,
												"nodeType": "ExpressionStatement",
												"src": "10755:36:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 467,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 431,
															"src": "10816:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 468,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 433,
															"src": "10823:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 469,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 435,
															"src": "10832:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 466,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "10807:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10807:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 471,
												"nodeType": "EmitStatement",
												"src": "10802:37:0"
											}
										]
									},
									"documentation": {
										"id": 429,
										"nodeType": "StructuredDocumentation",
										"src": "10037:424:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 473,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10476:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10503:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "10495:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 430,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10495:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10527:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "10519:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 432,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10519:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 435,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10553:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "10545:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 434,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10545:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10484:82:0"
									},
									"returnParameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10584:0:0"
									},
									"scope": 539,
									"src": "10467:380:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 515,
										"nodeType": "Block",
										"src": "11262:329:0",
										"statements": [
											{
												"assignments": [
													484
												],
												"declarations": [
													{
														"constant": false,
														"id": 484,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11281:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 515,
														"src": "11273:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 483,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11273:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 489,
												"initialValue": {
													"arguments": [
														{
															"id": 486,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 476,
															"src": "11310:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 487,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "11317:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 485,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 95,
														"src": "11300:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11300:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11273:52:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 496,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 490,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 484,
														"src": "11340:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 493,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11365:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 492,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11365:7:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 491,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11360:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11360:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 495,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11360:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11340:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 514,
												"nodeType": "IfStatement",
												"src": "11336:248:0",
												"trueBody": {
													"id": 513,
													"nodeType": "Block",
													"src": "11379:205:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 500,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 498,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 484,
																			"src": "11402:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 499,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 480,
																			"src": "11422:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11402:26:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 501,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11430:31:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 497,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11394:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 502,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11394:68:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 503,
															"nodeType": "ExpressionStatement",
															"src": "11394:68:0"
														},
														{
															"id": 512,
															"nodeType": "UncheckedBlock",
															"src": "11477:96:0",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 505,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 476,
																				"src": "11515:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 506,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 478,
																				"src": "11522:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 509,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 507,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 484,
																					"src": "11531:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 508,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 480,
																					"src": "11550:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11531:25:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 504,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 473,
																			"src": "11506:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 510,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11506:51:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 511,
																	"nodeType": "ExpressionStatement",
																	"src": "11506:51:0"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 474,
										"nodeType": "StructuredDocumentation",
										"src": "10855:277:0",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 516,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11147:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11181:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "11173:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 475,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11173:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11205:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "11197:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 477,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11197:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11231:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "11223:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11162:82:0"
									},
									"returnParameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11262:0:0"
									},
									"scope": 539,
									"src": "11138:453:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 526,
										"nodeType": "Block",
										"src": "12314:2:0",
										"statements": []
									},
									"documentation": {
										"id": 517,
										"nodeType": "StructuredDocumentation",
										"src": "11599:586:0",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 527,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12200:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 524,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12239:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "12231:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 518,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12231:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12262:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "12254:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 520,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12254:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 523,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12283:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "12275:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 522,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12275:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12220:76:0"
									},
									"returnParameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12314:0:0"
									},
									"scope": 539,
									"src": "12191:125:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 537,
										"nodeType": "Block",
										"src": "13042:2:0",
										"statements": []
									},
									"documentation": {
										"id": 528,
										"nodeType": "StructuredDocumentation",
										"src": "12324:590:0",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 538,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12929:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12967:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 538,
												"src": "12959:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12959:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12990:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 538,
												"src": "12982:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 531,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12982:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13011:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 538,
												"src": "13003:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 533,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13003:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12948:76:0"
									},
									"returnParameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13042:0:0"
									},
									"scope": 539,
									"src": "12920:124:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 540,
							"src": "1437:11610:0",
							"usedErrors": []
						}
					],
					"src": "108:12941:0"
				},
				"id": 0
			},
			"contracts/openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "contracts/openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							617
						]
					},
					"id": 618,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 541,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 542,
								"nodeType": "StructuredDocumentation",
								"src": "136:72:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 617,
							"linearizedBaseContracts": [
								617
							],
							"name": "IERC20",
							"nameLocation": "220:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 543,
										"nodeType": "StructuredDocumentation",
										"src": "234:163:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 551,
									"name": "Transfer",
									"nameLocation": "409:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "434:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "418:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 544,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "418:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 547,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "456:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "440:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 546,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 549,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "468:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "460:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "460:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "417:57:1"
									},
									"src": "403:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 552,
										"nodeType": "StructuredDocumentation",
										"src": "483:151:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 560,
									"name": "Approval",
									"nameLocation": "646:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "671:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "655:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 556,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "694:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "678:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 555,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "711:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "703:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:63:1"
									},
									"src": "640:78:1"
								},
								{
									"documentation": {
										"id": 561,
										"nodeType": "StructuredDocumentation",
										"src": "726:68:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 566,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "809:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "820:2:1"
									},
									"returnParameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 566,
												"src": "846:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 563,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:9:1"
									},
									"scope": 617,
									"src": "800:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 567,
										"nodeType": "StructuredDocumentation",
										"src": "863:74:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 574,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "952:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "970:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "962:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 568,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "962:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "961:17:1"
									},
									"returnParameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 572,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "1002:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 571,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1001:9:1"
									},
									"scope": 617,
									"src": "943:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 575,
										"nodeType": "StructuredDocumentation",
										"src": "1019:208:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 584,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1242:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1259:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "1251:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1251:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1271:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "1263:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 578,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1250:28:1"
									},
									"returnParameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "1297:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 581,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1297:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1296:6:1"
									},
									"scope": 617,
									"src": "1233:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 585,
										"nodeType": "StructuredDocumentation",
										"src": "1311:270:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 594,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1596:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1614:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "1606:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 586,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1606:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1629:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "1621:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 588,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1605:32:1"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "1661:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 591,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1661:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1660:9:1"
									},
									"scope": 617,
									"src": "1587:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 595,
										"nodeType": "StructuredDocumentation",
										"src": "1678:655:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 604,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2348:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 600,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 597,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2364:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "2356:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 596,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2356:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2381:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "2373:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 598,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2373:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2355:33:1"
									},
									"returnParameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 602,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "2407:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 601,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2407:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2406:6:1"
									},
									"scope": 617,
									"src": "2339:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 605,
										"nodeType": "StructuredDocumentation",
										"src": "2421:295:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 616,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2731:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2762:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "2754:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 606,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2754:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2785:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "2777:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2777:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2806:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "2798:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2798:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2743:76:1"
									},
									"returnParameters": {
										"id": 615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 614,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "2838:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 613,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2838:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2837:6:1"
									},
									"scope": 617,
									"src": "2722:122:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 618,
							"src": "210:2637:1",
							"usedErrors": []
						}
					],
					"src": "109:2740:1"
				},
				"id": 1
			},
			"contracts/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "contracts/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							617
						],
						"IERC20Metadata": [
							624
						]
					},
					"id": 625,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 619,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:2"
						},
						{
							"absolutePath": "contracts/openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 620,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 625,
							"sourceUnit": 618,
							"src": "140:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 622,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 617,
										"src": "317:6:2"
									},
									"id": 623,
									"nodeType": "InheritanceSpecifier",
									"src": "317:6:2"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 621,
								"nodeType": "StructuredDocumentation",
								"src": "167:120:2",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 624,
							"linearizedBaseContracts": [
								624,
								617
							],
							"name": "IERC20Metadata",
							"nameLocation": "299:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 625,
							"src": "289:447:2",
							"usedErrors": []
						}
					],
					"src": "113:625:2"
				},
				"id": 2
			},
			"contracts/openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "contracts/openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							646
						]
					},
					"id": 647,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 626,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "89:23:3"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 627,
								"nodeType": "StructuredDocumentation",
								"src": "116:505:3",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 646,
							"linearizedBaseContracts": [
								646
							],
							"name": "Context",
							"nameLocation": "641:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 635,
										"nodeType": "Block",
										"src": "718:36:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 632,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "736:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "736:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 631,
												"id": 634,
												"nodeType": "Return",
												"src": "729:17:3"
											}
										]
									},
									"id": 636,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 628,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:3"
									},
									"returnParameters": {
										"id": 631,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 630,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "709:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 629,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:3"
									},
									"scope": 646,
									"src": "656:98:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 644,
										"nodeType": "Block",
										"src": "829:34:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 641,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "847:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "847:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 640,
												"id": 643,
												"nodeType": "Return",
												"src": "840:15:3"
											}
										]
									},
									"id": 645,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "771:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "779:2:3"
									},
									"returnParameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "813:14:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 638,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "813:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "812:16:3"
									},
									"scope": 646,
									"src": "762:101:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 647,
							"src": "623:243:3",
							"usedErrors": []
						}
					],
					"src": "89:779:3"
				},
				"id": 3
			}
		}
	}
}